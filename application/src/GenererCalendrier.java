


import javax.swing.ImageIcon;
import connexion.ConnexionOracleFactory;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Rémy
 */
public class GenererCalendrier extends javax.swing.JFrame {

    /**
     * Creates new form Test
     */
    public GenererCalendrier(String nomDivision) {
        initComponents();
        listModel = new javax.swing.DefaultListModel<>();
        listJournee = new javax.swing.DefaultListModel<>();
        genererNombreJournee(nomDivision);
        compet = nomDivision;
        jList1.setModel(listModel);
        boquerButtonGenerer();
    }
    
    
    

    // Ouvre une connexion stockée dans la variable connexion
    public void openConnection(javax.swing.DefaultListModel<String> listModel) {
        connexion = ConnexionOracleFactory.creerConnexion();
        if (connexion == null) {
            listModel.addElement("Probleme de connection.");
            System.exit(1);
        }
    }

    public void closeConnection() {
        try {
            connexion.close();	// Fermeture de la connexion
        } catch (java.sql.SQLException e) {
            System.out.println("ERREUR ORACLE" + e.getMessage());
        }
    }
    
    
    public void boquerButtonGenerer()
    {
        try {
            openConnection(listModel);
            java.sql.Statement requete;
            requete = connexion.createStatement();
            java.sql.ResultSet query;
            query = requete.executeQuery(
                    "SELECT DISTINCT nom_competition FROM matchFootball WHERE nom_competition = '"+compet+"'");//gérer nbpointsldc
            if (query.next()) {
                genererButton.setEnabled(false);
            }
            query.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException e) {
            listModel.addElement("Erreur execution requete " + e.getMessage());
        }
    }
    
    
    public void afficherJournee()
    {
        String equipe1 = "";
        String equipe2 = "";
        listModel.clear();

        try {
            openConnection(listModel);
            java.sql.Statement requete_nom;
            requete_nom = connexion.createStatement();
            java.sql.ResultSet ensresul;
            //ensresul = requete_nom.executeQuery("select nomclub from club where idclub in(" + calendrierDom[i] + "," + calendrierExt[i] + ")");

            ensresul = requete_nom.executeQuery("select distinct * from matchfootball where no_journee ="+journeeComboBox.getSelectedItem().toString()+" and nom_competition = '"+compet+"'");

            while (ensresul.next()) {
                equipe1 = ensresul.getString(1);
                equipe2 = ensresul.getString(2);
                listModel.addElement(equipe1 + " VERSUS " + equipe2);
            }
            ensresul.close();
            requete_nom.close();
            closeConnection();
        } catch (java.sql.SQLException e) {
            System.out.println("Erreur exécution requête " + e.getMessage());
        }
        jList1.setListData(listModel.toArray());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        retour = new javax.swing.JLabel();
        genererButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        journeeComboBox = new javax.swing.JComboBox();
        afficherButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 533));
        getContentPane().setLayout(null);

        retour.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/fleche-retour.png"))); // NOI18N
        retour.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                retourMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                retourMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                retourMousePressed(evt);
            }
        });
        getContentPane().add(retour);
        retour.setBounds(910, 400, 70, 70);

        genererButton.setText("Générer");
        genererButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genererButtonActionPerformed(evt);
            }
        });
        getContentPane().add(genererButton);
        genererButton.setBounds(30, 310, 170, 80);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Calendrier");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(460, 190, 70, 17);

        jList1.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(240, 230, 520, 250);

        journeeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxJourneeItemsChange(evt);
            }
        });
        getContentPane().add(journeeComboBox);
        journeeComboBox.setBounds(550, 170, 210, 50);

        afficherButton.setText("Afficher");
        afficherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afficherButtonActionPerformed(evt);
            }
        });
        getContentPane().add(afficherButton);
        afficherButton.setBounds(240, 170, 120, 50);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/background.png"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 1000, 506);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void retourMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_retourMouseClicked
        ImageIcon i = new ImageIcon(getClass().getResource("/Images/fleche-retour_p.png"));
        retour.setIcon(i);
        
        this.setVisible(false);
    }//GEN-LAST:event_retourMouseClicked

    private void retourMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_retourMouseExited
        ImageIcon i = new ImageIcon(getClass().getResource("/Images/fleche-retour.png"));
        retour.setIcon(i);
    }//GEN-LAST:event_retourMouseExited

    private void retourMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_retourMousePressed
        ImageIcon i = new ImageIcon(getClass().getResource("/Images/fleche-retour_p.png"));
        retour.setIcon(i);
    }//GEN-LAST:event_retourMousePressed

    private void genererButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genererButtonActionPerformed
 
        int depart;
        int fin;
        if (compet.equals("Championship")) {
            depart = 1;
            fin = 24;
        } else if (compet.equals("Division 1")) {
            depart = 25;
            fin = 40;
        } else if (compet.equals("Division 2")) {
            depart = 41;
            fin = 54;
        } else if (compet.equals("Eerste Divisie")) {
            depart = 55;
            fin = 74;
        } else if (compet.equals("Eredivisie")) {
            depart = 75;
            fin = 92;
        } else if (compet.equals("Liga")) {
            depart = 93;
            fin = 112;
        } else if (compet.equals("Liga Adelante")) {
            depart = 113;
            fin = 134;
        } else if (compet.equals("Liga NOS")) {
            depart = 135;
            fin = 152;
        } else if (compet.equals("Ligue 1")) {
            depart = 153;
            fin = 172;
        } else if (compet.equals("Ligue 2")) {
            depart = 173;
            fin = 192;
        } else if (compet.equals("Premier League")) {
            depart = 193;
            fin = 212;
        } else if (compet.equals("Segunda Liga")) {
            depart = 213;
            fin = 236;
        } else if (compet.equals("Serie A")) {
            depart = 237;
            fin = 256;
        } else if (compet.equals("Serie B")) {
            depart = 257;
            fin = 278;
        } else if (compet.equals("1. Bundesliga")) {
            depart = 279;
            fin = 296;
        } else {
            depart = 297;
            fin = 314;
        }

        generer(depart, fin);
    }//GEN-LAST:event_genererButtonActionPerformed

    private void afficherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afficherButtonActionPerformed
        afficherJournee(); 

    }//GEN-LAST:event_afficherButtonActionPerformed

    private void boxJourneeItemsChange(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxJourneeItemsChange
        afficherJournee();        // TODO add your handling code here:
    }//GEN-LAST:event_boxJourneeItemsChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenererCalendrier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenererCalendrier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenererCalendrier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenererCalendrier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new GenererCalendrier().setVisible(true);
            }
        });

    }

    public void generer(int depart, int fin) {

        int nbEquipe = (fin - depart) + 1;
        int nbMatchParJournee = (nbEquipe) / 2;
        int nbJournee = (fin - depart) * 2;
        int totalMatch = nbJournee * nbMatchParJournee;

        int[] calendrierDom = new int[totalMatch];
        int[] calendrierExt = new int[totalMatch];
        int[] calendrierTemp = new int[totalMatch / 2];
        int i, temp1, temp2, j, temp3;
        int numJournee = 0;

        boolean alternateur = true;

        for (i = 0; i < nbEquipe / 2; i++) {

            temp3 = i + depart;
            calendrierDom[i] = temp3;
            calendrierExt[i] = fin - (i);
        }

        for (i = 1; i < nbJournee / 2; i++) {

            calendrierDom[i * nbEquipe / 2] = depart;

        }

        i = 1;

        do {
            temp1 = calendrierDom[(nbEquipe / 2) - 1 + (i - 1) * (nbEquipe / 2)];
            temp2 = calendrierExt[0 + (i - 1) * (nbEquipe / 2)];

            for (j = 2; j < nbEquipe / 2; j++) {

                calendrierDom[j + i * (nbEquipe / 2)] = calendrierDom[(j - 1) + (i - 1) * (nbEquipe / 2)];
                calendrierExt[(j - 2) + i * (nbEquipe / 2)] = calendrierExt[(j - 1) + (i - 1) * (nbEquipe / 2)];

            }
            calendrierExt[(nbEquipe / 2) - 2 + i * (nbEquipe / 2)] = calendrierExt[(nbEquipe / 2) - 1 + (i - 1) * (nbEquipe / 2)];
            calendrierDom[1 + i * (nbEquipe / 2)] = temp2;
            calendrierExt[(nbEquipe / 2) - 1 + i * (nbEquipe / 2)] = temp1;

            i++;

        } while (i < nbJournee / 2);

        for (i = 0; i < totalMatch / 2; i++) {
            calendrierTemp[i] = calendrierDom[i];
        }

        for (i = totalMatch / 2; i < totalMatch; i++) {
            calendrierDom[i] = calendrierExt[i - (totalMatch / 2)];
            calendrierExt[i] = calendrierTemp[i - (totalMatch / 2)];
        }
        temp1 = 0;
        temp2 = 0;

        for (i = 0; i < totalMatch; i++) {

            if (temp1 == nbMatchParJournee) {

                temp2 += temp1;

                for (j = temp2; j < temp2 + nbMatchParJournee; j++) {

                    if (j >= totalMatch/2) {
                        break; // pour éviter les outofbound
                    }
                    calendrierTemp[j] = calendrierDom[j];
                    calendrierDom[j] = calendrierExt[j];
                    calendrierExt[j] = calendrierTemp[j];

                    calendrierTemp[j] = calendrierDom[(totalMatch / 2) + j];
                    calendrierDom[(totalMatch / 2) + j] = calendrierExt[(totalMatch / 2) + j];
                    calendrierExt[(totalMatch / 2) + j] = calendrierTemp[j];
                    calendrierDom[j] = calendrierExt[((totalMatch / 2) + j)];

                    i++;
                }

                temp1 = 0;
                temp2 += nbMatchParJournee;

            }

            temp1++;

        }


        for (i = 0; i < totalMatch; i++) {

            if (i % (nbEquipe / 2) == 0) {
                numJournee++;
                System.out.println("Journée " + numJournee);
                listModel.addElement(" ");
                listModel.addElement("Journée " + numJournee);
                listModel.addElement(" ");

            }

            String equipe1 = "";
            String equipe2 = "";
            //System.out.println(calendrierDom[i] + " VS " + calendrierExt[i]);

            try {
                openConnection(listModel);
                java.sql.Statement requete;
                requete = connexion.createStatement();

                java.sql.PreparedStatement requetevar;
                requetevar = connexion.prepareStatement("Insert into MATCHFOOTBALL (NOMCLUB1, NOMCLUB2, NO_JOURNEE, NOM_COMPETITION) values (?,  ?,  ? , ?) ");

                try {
                    java.sql.Statement requete_nom;
                    requete_nom = connexion.createStatement();
                    java.sql.ResultSet ensresul;
                    //ensresul = requete_nom.executeQuery("select nomclub from club where idclub in(" + calendrierDom[i] + "," + calendrierExt[i] + ")");

                    ensresul = requete_nom.executeQuery("select * from (select nomclub from club where idclub=" + calendrierDom[i] + "), (select nomclub from club where idclub=" + calendrierExt[i] + ")");

                    while (ensresul.next()) {
                        equipe1 = ensresul.getString(1);
                        equipe2 = ensresul.getString(2);
                        System.out.println(equipe1 + "\t\t" + equipe2);
                        listModel.addElement(equipe1 + " VERSUS " + equipe2);
                    }
                    ensresul.close();
                    requete_nom.close();
                } catch (java.sql.SQLException e) {
                    System.out.println("Erreur exécution requête " + e.getMessage());
                }

                requetevar.setString(1, equipe1);
                requetevar.setString(2, equipe2);
                requetevar.setInt(3, numJournee);
                requetevar.setString(4, compet);
                requetevar.executeUpdate();
                requetevar.close();
                requete.close();
                closeConnection();
                
                        
            } catch (java.sql.SQLException e) {
                System.out.println("Erreur exécution requête " + e.getMessage());
            }

        }
        genererNombreJournee(compet);

        //jList1.setListData(listModel.toArray());
    }

    public void genererNombreJournee(String competition) {
        listModel.clear();
        try {
            openConnection(listModel);
            java.sql.Statement requete_nom;
            requete_nom = connexion.createStatement();
            java.sql.ResultSet ensresul;

            ensresul = requete_nom.executeQuery("select distinct no_journee from matchfootball where nom_competition = '"+competition+"' order by no_journee asc");

            while (ensresul.next()) {
                System.out.println(ensresul.getInt(1));
                journeeComboBox.addItem(ensresul.getInt(1));
            }
            
            ensresul.close();
            requete_nom.close();
            closeConnection();
        } catch (java.sql.SQLException e) {
            System.out.println("Erreur exécution requête " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton afficherButton;
    private javax.swing.JLabel background;
    private javax.swing.JButton genererButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox journeeComboBox;
    private javax.swing.JLabel retour;
    // End of variables declaration//GEN-END:variables
    private static java.sql.Connection connexion;
    private javax.swing.DefaultListModel<String> listModel;
    private javax.swing.DefaultListModel<String> listJournee;     //pas utilisé
    /*java.util.ArrayList<String> listModel;

    java.util.ArrayList<String> listJournee;
    */
    String compet;

}
